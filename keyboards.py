from aiogram.types import ReplyKeyboardMarkup, InlineKeyboardMarkup, InlineKeyboardButton
from mesconstants import mesdict
from collections import deque


keydict = {"rus": {}}

#region main
keydict["rus"]["main"] = ReplyKeyboardMarkup(resize_keyboard=True)
keydict["rus"]["main"].add("üíµ –ü–æ–¥–ø–∏—Å–∫–∞ üíµ")
keydict["rus"]["main"].add("‚ÑπÔ∏è –ü–æ–º–æ—â—å ‚ÑπÔ∏è")
#endregion main

#region request
keydict["rus"]["request"] = InlineKeyboardMarkup()
keydict["rus"]["request"].row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Ç–µ–≥–∏", callback_data="edit_tags"), InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∞–Ω—Ç–∏—Ç–µ–≥–∏", callback_data="edit_antitags"))
keydict["rus"]["request"].row(InlineKeyboardButton(text="–í—ã–±—Ä–∞—Ç—å —Ç–∏–ø", callback_data="set_model"))
keydict["rus"]["request"].row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π", callback_data="edit_imgCount"), InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–æ–¥–Ω–æ—Å—Ç—å", callback_data="edit_scale"))
keydict["rus"]["request"].row(InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —à–∏—Ä–∏–Ω—É", callback_data="edit_width"), InlineKeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å –≤—ã—Å–æ—Ç—É", callback_data="edit_height"))
keydict["rus"]["request"].row(InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–º–µ—Ä –∫–∞—Ä—Ç–∏–Ω–∫–∏", callback_data="set_reference"))
keydict["rus"]["request"].row(InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ö–æ–∂–µ—Å—Ç—å —Å –ø—Ä–∏–º–µ—Ä–æ–º", callback_data="edit_referenceStrength"))
keydict["rus"]["request"].row(InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ", callback_data="confirm"), InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùé", callback_data="cancel"))
#endregion request

#region end
keydict["rus"]["end"] = InlineKeyboardMarkup()
keydict["rus"]["end"].row(InlineKeyboardButton(text="–ü–æ–≤—Ç–æ—Ä–∏—Ç—å üîÑ", callback_data="repeat"))
#endregion end

#region model
keydict["rus"]["model"] = InlineKeyboardMarkup()
btnGroup = []
for model in mesdict['rus']['model']['names']:
  btnGroup.append(InlineKeyboardButton(text=model, callback_data=f"model_{model}"))
  if len(btnGroup) % 2 == 0:
    keydict["rus"]["model"].row(*btnGroup)
    btnGroup = []

if len(mesdict['rus']['model']['names'])%2 == 1:
  keydict["rus"]["model"].add(InlineKeyboardButton(text=deque(mesdict['rus']['model']['names'], maxlen=1)[0], callback_data=f"model_{deque(mesdict['rus']['model']['names'], maxlen=1)[0]}"))
#endregion model

#region reference
keydict["rus"]["reference"] = InlineKeyboardMarkup()
keydict["rus"]["reference"].row(InlineKeyboardButton(text="–£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–º–µ—Ä ‚ùé", callback_data="delete_reference"))
#endregion reference

#region after generation
keydict["rus"]["afterGeneration"] = InlineKeyboardMarkup()
keydict["rus"]["afterGeneration"].row(InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Ö–æ–∂–µ–µ üîÇ", callback_data="generate_similary"))
keydict["rus"]["afterGeneration"].row(InlineKeyboardButton(text="–£–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ ‚è´", callback_data="upgrade_quality"))
#endregion after generation

#region help keyboards
keydict["rus"]["help"] = InlineKeyboardMarkup()
keydict["rus"]["help"].row(InlineKeyboardButton(text="–û—Å–Ω–æ–≤–Ω–æ–µ", callback_data="help_start"))
keydict["rus"]["help"].row(InlineKeyboardButton(text="–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞", callback_data="help_params"))
keydict["rus"]["help"].row(InlineKeyboardButton(text="–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ—Ö–æ–∂–µ–≥–æ –∏ —É–ª—É—á—à–µ–Ω–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞", callback_data="help_upgradeandsimilary"))
keydict["rus"]["help"].row(InlineKeyboardButton(text="–ü–æ–¥–ø–∏—Å–∫–∞", callback_data="help_subscription"))
keydict["rus"]["help"].row(InlineKeyboardButton(text="–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data="help_contacts"))
keydict["rus"]["help"].row(InlineKeyboardButton(text="–ó–∞–∫—Ä—ã—Ç—å ‚ùé", callback_data="end_help"))


keydict["rus"]["helpUndo"] = InlineKeyboardMarkup()
keydict["rus"]["helpUndo"].row(InlineKeyboardButton(text="–ù–∞–∑–∞–¥ ‚óÄÔ∏è", callback_data="undo_help"))
#endregion help keyboards

#region update queue
keydict["rus"]["updateQueue"] = InlineKeyboardMarkup()
keydict["rus"]["updateQueue"].row(InlineKeyboardButton(text="–û–±–Ω–æ–≤–∏—Ç—å –º–µ—Å—Ç–æ –≤ –æ—á–µ—Ä–µ–¥–∏ üîÑ", callback_data="update_queue"))
#endregion update queue

#region func-generate keyboard
def generate_pay_keyboard(url, lang):
  if lang == "rus":
    payKeyboard = InlineKeyboardMarkup()
    payKeyboard.row(InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É üîÑ", callback_data="check_pay"))
    payKeyboard.row(InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å üí¥", url=url))
    return payKeyboard
#endregion func-generate keyboards